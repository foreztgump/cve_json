{
    "id": "CVE-2024-57945",
    "product": "Linux",
    "version": "",
    "vulnerability": [
        "n/a"
    ],
    "description": "In the Linux kernel, the following vulnerability has been resolved:riscv: mm: Fix the out of bound issue of vmemmap addressIn sparse vmemmap model, the virtual address of vmemmap is calculated as:((struct page *)VMEMMAP_START - (phys_ram_base >> PAGE_SHIFT)).And the struct page's va can be calculated with an offset:(vmemmap + (pfn)).However, when initializing struct pages, kernel actually starts from thefirst page from the same section that phys_ram_base belongs to. If thefirst page's physical address is not (phys_ram_base >> PAGE_SHIFT), thenwe get an va below VMEMMAP_START when calculating va for it's struct page.For example, if phys_ram_base starts from 0x82000000 with pfn 0x82000, thefirst page in the same section is actually pfn 0x80000. Duringinit_unavailable_range(), we will initialize struct page for pfn 0x80000with virtual address ((struct page *)VMEMMAP_START - 0x2000), which isbelow VMEMMAP_START as well as PCI_IO_END.This commit fixes this bug by introducing a new variable'vmemmap_start_pfn' which is aligned with memory section size and usingit to calculate vmemmap address instead of phys_ram_base.",
    "poc": {
        "reference": [
            "No PoCs from references."
        ],
        "github": [
            "https://github.com/fkie-cad/nvd-json-data-feeds"
        ]
    }
}