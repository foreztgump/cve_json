{
    "id": "CVE-2025-38538",
    "product": "Linux",
    "version": "",
    "vulnerability": [
        "n/a"
    ],
    "description": "In the Linux kernel, the following vulnerability has been resolved:dmaengine: nbpfaxi: Fix memory corruption in probe()The nbpf->chan[] array is allocated earlier in the nbpf_probe() functionand it has \"num_channels\" elements.  These three loops iterate oneelement farther than they should and corrupt memory.The changes to the second loop are more involved.  In this case, we'recopying data from the irqbuf[] array into the nbpf->chan[] array.  Ifthe data in irqbuf[i] is the error IRQ then we skip it, so the iteratorsare not in sync.  I added a check to ensure that we don't go beyond theend of the irqbuf[] array.  I'm pretty sure this can't happen, but itseemed harmless to add a check.On the other hand, after the loop has ended there is a check to ensurethat the \"chan\" iterator is where we expect it to be.  In the originalcode we went one element beyond the end of the array so the iteratorwasn't in the correct place and it would always return -EINVAL.  However,now it will always be in the correct place.  I deleted the check sincewe know the result.",
    "poc": {
        "reference": [
            "No PoCs from references."
        ],
        "github": [
            "https://github.com/w4zu/Debian_security"
        ]
    }
}