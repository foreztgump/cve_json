{
    "id": "CVE-2025-39735",
    "product": "Linux",
    "version": "6e39b681d1eb16f408493bf5023788b57f68998c< 3d6fd5b9c6acbc005e53d0211c7381f566babec1 ",
    "vulnerability": [
        "n/a"
    ],
    "description": "In the Linux kernel, the following vulnerability has been resolved:jfs: fix slab-out-of-bounds read in ea_get()During the \"size_check\" label in ea_get(), the code checks if the extendedattribute list (xattr) size matches ea_size. If not, it logs\"ea_get: invalid extended attribute\" and calls print_hex_dump().Here, EALIST_SIZE(ea_buf->xattr) returns 4110417968, which exceedsINT_MAX (2,147,483,647). Then ea_size is clamped:\tint size = clamp_t(int, ea_size, 0, EALIST_SIZE(ea_buf->xattr));Although clamp_t aims to bound ea_size between 0 and 4110417968, the upperlimit is treated as an int, causing an overflow above 2^31 - 1. This leads\"size\" to wrap around and become negative (-184549328).The \"size\" is then passed to print_hex_dump() (called \"len\" inprint_hex_dump()), it is passed as type size_t (an unsignedtype), this is then stored inside a variable called\"int remaining\", which is then assigned to \"int linelen\" whichis then passed to hex_dump_to_buffer(). In print_hex_dump()the for loop, iterates through 0 to len-1, where len is18446744073525002176, calling hex_dump_to_buffer()on each iteration:\tfor (i = 0; i < len; i += rowsize) {\t\tlinelen = min(remaining, rowsize);\t\tremaining -= rowsize;\t\thex_dump_to_buffer(ptr + i, linelen, rowsize, groupsize,\t\t\t\t   linebuf, sizeof(linebuf), ascii);\t\t...\t}The expected stopping condition (i < len) is effectively brokensince len is corrupted and very large. This eventually leads tothe \"ptr+i\" being passed to hex_dump_to_buffer() to get closerto the end of the actual bounds of \"ptr\", eventually an out ofbounds access is done in hex_dump_to_buffer() in the followingfor loop:\tfor (j = 0; j < len; j++) {\t\t\tif (linebuflen < lx + 2)\t\t\t\tgoto overflow2;\t\t\tch = ptr[j];\t\t...\t}To fix this we should validate \"EALIST_SIZE(ea_buf->xattr)\"before it is utilised.",
    "poc": {
        "reference": [
            "No PoCs from references."
        ],
        "github": [
            "https://github.com/runwhen-contrib/helm-charts",
            "https://github.com/w4zu/Debian_security"
        ]
    }
}