{
    "id": "CVE-2021-47460",
    "product": "Linux",
    "version": "",
    "vulnerability": [
        "n/a"
    ],
    "description": "In the Linux kernel, the following vulnerability has been resolved:ocfs2: fix data corruption after conversion from inline formatCommit 6dbf7bb55598 (\"fs: Don't invalidate page buffers inblock_write_full_page()\") uncovered a latent bug in ocfs2 conversionfrom inline inode format to a normal inode format.The code in ocfs2_convert_inline_data_to_extents() attempts to zero outthe whole cluster allocated for file data by grabbing, zeroing, anddirtying all pages covering this cluster.  However these pages arebeyond i_size, thus writeback code generally ignores these dirty pagesand no blocks were ever actually zeroed on the disk.This oversight was fixed by commit 693c241a5f6a (\"ocfs2: No need to zeropages past i_size.\") for standard ocfs2 write path, inline conversionpath was apparently forgotten; the commit log also has a reasoning whythe zeroing actually is not needed.After commit 6dbf7bb55598, things became worse as writeback code stoppedinvalidating buffers on pages beyond i_size and thus these pages end upwith clean PageDirty bit but with buffers attached to these pages beingstill dirty.  So when a file is converted from inline format, thenwriteback triggers, and then the file is grown so that these pagesbecome valid, the invalid dirtiness state is preserved,mark_buffer_dirty() does nothing on these pages (buffers are alreadydirty) but page is never written back because it is clean.  So datawritten to these pages is lost once pages are reclaimed.Simple reproducer for the problem is:  xfs_io -f -c \"pwrite 0 2000\" -c \"pwrite 2000 2000\" -c \"fsync\" \\    -c \"pwrite 4000 2000\" ocfs2_fileAfter unmounting and mounting the fs again, you can observe that end of'ocfs2_file' has lost its contents.Fix the problem by not doing the pointless zeroing during conversionfrom inline format similarly as in the standard write path.[akpm@linux-foundation.org: fix whitespace, per Joseph]",
    "poc": {
        "reference": [
            "No PoCs from references."
        ],
        "github": [
            "https://github.com/fkie-cad/nvd-json-data-feeds"
        ]
    }
}